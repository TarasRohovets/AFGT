@model AFGT.Models.Evento

@{
    ViewBag.Title = "Edit";
}

<h2>Editar</h2>


@using (Html.BeginForm("Edit", "Eventoes", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Evento</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EventosID)

        <div class="form-group"><!--Falta o upload da imagem-->
            <label class="control-label col-md-2">Imagem do Evento</label>         
            <div class="col-md-10">             
                <h3><img src=@Html.DisplayFor(model => model.Link) style=" width:280px; height:160px; background: #ffffff; margin: auto; -moz-border-radius: 0px; border-radius: 0px; padding: 6px; box-shadow: 0px 0px 20px #888;" /></h3>
                <input type="file" name="file" value="Browse" class="btn btn-default" />
                </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Nome do Evento</label>   
            @*@Html.LabelFor(model => model.NomeEvento, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.NomeEvento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NomeEvento, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Endereço</label>   
            @*@Html.LabelFor(model => model.Morada.Endereco, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">

                @Html.EditorFor(model => model.Morada.Endereco, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Morada, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Morada.Cidade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Morada.Cidade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Morada, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" id="helpme">
            <label class="control-label col-md-2">Código Postal</label>
            @*@Html.LabelFor(model => model.Morada.CodPostal, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Contem 8 caracteres: 0000-000">
                <span class="glyphicon glyphicon-info-sign"></span>
            </a>
            <div class="col-md-10">
                   
                @Html.EditorFor(model => model.Morada.CodPostal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Morada, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Descrição</label>
            @*@Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="helpme">

            @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Date: YYYY-MM-DD HH:MM">
                <span class="glyphicon glyphicon-info-sign"></span>
            </a>
            <div class="col-md-10">
                <!--  Html.EditorFor(model => model.Data, new { htmlAttributes = new { class = "form-control" } })-->
                <!--Html.ValidationMessageFor(model => model.Data, "", new { class = "text-danger" })-->
                <div class='input-group date'>
                    @{ Html.EnableClientValidation(false); }
                    @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger" })
                    @Html.TextBoxFor(model => model.Data, new { @class = "form-control datetimepicker" })
                    @{ Html.EnableClientValidation(true); }
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Artistas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Artistas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Artistas, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Voltar a lista de Eventos", "Index", null , new { @class = "btn btn-default" })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $("a.tooltipLink").tooltip();


    $('.datetimepicker').datetimepicker({
        
        format: 'DD-MM-YYYY HH:mm',
        
        sideBySide: true,
        showClose: true,
        showClear: true,
        toolbarPlacement: 'top',
        stepping: 15,
        locale: moment.locale('pt'),
        tooltips: {
            clear: 'Limpar',
            close: 'Fechar',
            selectMonth: 'Escolha Mês',
            prevMonth: 'Mês anterior',
            nextMonth: 'Proximo Mês',
            selectYear: 'Escolha Ano',
            prevYear: 'Ano anterior',
            nextYear: 'Proximo Ano',
            incrementHour: 'Aumentar as horas',
            pickHour: 'Escolha a Hora',
            decrementHour: 'Diminuir as horas',
            incrementMinute: 'Aumentar os minutos',
            pickMinute: 'Escolha os minutos',
            decrementMinute: 'Diminuir os minutos',
        }
    });


    $('.datetimepicker').focusout(function () {

        var input = $('.datetimepicker').val();
        console.log(input);
        var output = input.substr(0, 10).split('-').reverse().join('-') + " " + input.substr(11, 5);
        console.log(output);
        $('.datatimepicker').val(ouput);
        console.log($('.datatimepicker').val());
    });

</script>
}
