@model AFGT.Models.Evento

@{
    ViewBag.Title = "Create";
}


<h2>Create Event</h2>


@using (Html.BeginForm("Create", "Eventoes", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
   

    <div class="form-horizontal">
      
    <div class="form-horizontal" id="form-Horizontal">
        <h4>Evento</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">


            <label class="control-label col-md-2">Imagem do Evento</label>
            <div class="col-md-10">
                <input type="file" name="file" value="Browse" class="btn btn-default" />

            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Nome do Evento</label>
            <div class="col-md-10">
                @Html.EditorFor(model => model.NomeEvento, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NomeEvento, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2">Endereço</label>
            @*@Html.LabelFor(model => model.Morada.Endereco, htmlAttributes: new { @class = "control-label col-md-2"})*@
            <div class="col-md-10">

                @Html.EditorFor(model => model.Morada.Endereco, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Morada, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Morada.Cidade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.Morada.Cidade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Morada, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group" id="helpme">
            <label class="control-label col-md-2">Código Postal</label>
            @*@Html.LabelFor(model => model.Morada.CodPostal, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Contem 8 caracteres: 0000-000">
                <span class="glyphicon glyphicon-info-sign"></span>
            </a>
            <div class="col-md-10">

                @Html.EditorFor(model => model.Morada.CodPostal, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Morada, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <label class="control-label col-md-2">Descrição</label>
            @*@Html.LabelFor(model => model.Descricao, htmlAttributes: new { @class = "control-label col-md-2" })*@

            <div class="col-md-10">
                @Html.EditorFor(model => model.Descricao, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Descricao, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="helpme">

            @Html.LabelFor(model => model.Data, htmlAttributes: new { @class = "control-label col-md-2" })
            <a data-toggle="tooltip" class="tooltipLink" data-original-title="Date: DD-MM-YYYY HH:MM">
                <span class="glyphicon glyphicon-info-sign"></span>
            </a>
            <div class="col-md-10">
                <!--  Html.EditorFor(model => model.Data, new { htmlAttributes = new { class = "form-control" } })-->
                <!--Html.ValidationMessageFor(model => model.Data, "", new { class = "text-danger" })-->
                <div class='input-group date'>
                    @{ Html.EnableClientValidation(false); }
                    @Html.ValidationMessageFor(model => model.Data, "", new { @class = "text-danger", id = "checkdate" })
                    @Html.TextBoxFor(model => model.Data, new { @class = "form-control datetimepicker" })
                    @{ Html.EnableClientValidation(true); }
                </div>
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.Artistas, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Artistas, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Artistas, "", new { @class = "text-danger" })
            </div>
        </div>
            <div class="form-group">
                <!--artista-->
                @Html.LabelFor(model => model.Artistas, htmlAttributes: new { @class = "control-label col-md-2" })
               
                <div class="control-label col-md-4" id="tagsssbox">
                    @*@Html.EditorFor(model => model.Artistas, new { htmlAttributes = new { @class = "form-control" } })*@

                  
                        
                     
                      
                     <input name="entradadetags" id="entradadetags"/>
                   
                   
                       
                    

                        @*@Html.ValidationMessageFor(model => model.Artistas, "", new { @class = "text-danger" })*@

                       
                    </div>
                
               

            </div>
          
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>

        </div>        
        
        
                <label class="control-label col-md-2">Outras Fotos</label>
                <div class="col-md-10">
                    <input type="file" class="multiple btn btn-default" name="files" multiple />
                </div>
            </div>
           
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="button-two" id="submit" />
                </div>
            </div>

        
    </div>

                        }
        <div>
          
           
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
        </div>



@section Styles {

    <link rel="stylesheet" href="~/Content/jquery.tagit.css">
    <link rel="stylesheet" href="~/Content/tagit.ui-zendesk.css">
}

@section Scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.9.2/jquery-ui.min.js" type="text/javascript" charset="utf-8"></script>
    <script src="~/Scripts/tag-it.min.js"></script>

@Scripts.Render("~/bundles/jqueryval")

    <script>
        $("a.tooltipLink").tooltip();


        $('.datetimepicker').datetimepicker({

            format: "DD-MM-YYYY HH:mm",


                sideBySide: true,
                showClose: true,
                showClear: true,
                toolbarPlacement: 'top',
                stepping: 15,
                locale: moment.locale('pt'),
                tooltips: {
                    clear: 'Limpar',
                    close: 'Fechar',
                    selectMonth: 'Escolha Mês',
                    prevMonth: 'Mês anterior',
                    nextMonth: 'Proximo Mês',
                    selectYear: 'Escolha Ano',
                    prevYear: 'Ano anterior',
                    nextYear: 'Proximo Ano',
                    incrementHour: 'Aumentar as horas',
                    pickHour: 'Escolha a Hora',
                    decrementHour: 'Diminuir as horas',
                    incrementMinute: 'Aumentar os minutos',
                    pickMinute: 'Escolha os minutos',
                    decrementMinute: 'Diminuir os minutos',
                }
        });

        $('.datetimepicker').focusout(function () {

            var input = $('.datetimepicker').val();
            console.log(input);

            if ($('.datetimepicker').valid()) {
                var output = input.substr(0, 10).split('-').reverse().join('-') + " " + input.substr(11, 5);
                console.log(output);
                $('.datatimepicker').val(output);
                console.log($('.datatimepicker').val());
            } else {

            }




        });


        $(document).ready(function () {
            $("#entradadetags").tagit({
                allowSpaces: true,
                singleField: false,
                availableTags: @Html.Raw(ViewBag.Artistas),
                
            });
        });




    </script>

        
        @*var z = $(document).ready(function () {
            $('#xcxcxc').tagit({
               
                allowSpaces: true,
                tagLimit: 500,
                autocomplete: "Insere aqui os teus artistas..."
                 

            });
        });*@
        

        @*//afterTagAdded(funcion (){
        //      fazer funcao para elogiar asescolhas dos artistas depois de introduzidas as tags
        //}): 


        //$.ajax({
        //    url: '/Questions/GetTags',
        //    dataType: 'json',
        //    success: function (data) {
        //        //data should be a json object that returns an array
        //        $('#xcxcxc').tagit({
        //            availableTags: data
        //        });
        //    }
        //});*@

    
    
}
